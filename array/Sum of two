class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int>index;
        // vector<int>::iterator p; 
        unordered_map<int,int> m;
        unordered_map<int,int>::iterator it;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        for(int i=0;i<nums.size();i++){
            if(m[target-nums[i]] ){
                int s=target-nums[i];
                auto p = find(nums.begin(), nums.end(), s);
                if (p != nums.end()) 
                {

                    // calculating the index
                    // of K
                    int ind = p - nums.begin();
                    if(ind!=i){
                        index.push_back(i);
                        index.push_back(ind);
                        return index;
                    }
                }
                else {
                    // If the element is not
                    // present in the vector
                    cout << "-1" << endl;
                }

            }
            else{continue;}
        }
        return index;
    }
};
